{"version":3,"sources":["src/app/users/user/user.page.html","src/app/users/user/user-routing.module.ts","src/app/users/user/user.module.ts","src/app/users/user/user.page.scss","src/app/users/user/user.page.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar>\\r\\n\\r\\n        <!-- Botão do menu -->\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-menu-button></ion-menu-button>\\r\\n        </ion-buttons>\\r\\n\\r\\n        <ion-title>Dados do Usuário</ion-title>\\r\\n\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n\\r\\n    <!-- Se usuário não existe -->\\r\\n    <ion-list *ngIf=\\\"noUser\\\">\\r\\n        <ion-item color=\\\"danger\\\">\\r\\n            <ion-label class=\\\"ion-text-center\\\">Usuário não foi encontrado!</ion-label>\\r\\n        </ion-item>\\r\\n        <ion-button expand=\\\"block\\\" class=\\\"ion-margin\\\" (click)=\\\"listUsers()\\\">Listar usuários</ion-button>\\r\\n    </ion-list>\\r\\n\\r\\n    <!-- Spinner -> Carregando dados. Aguarde... -->\\r\\n    <div class=\\\"ion-text-center ion-margin ion-padding\\\" *ngIf=\\\"!data && !noUser\\\">\\r\\n        <ion-spinner name=\\\"lines\\\"></ion-spinner>\\r\\n    </div>\\r\\n\\r\\n    <!-- Usuário encontrado -->\\r\\n    <div *ngIf=\\\"data\\\">\\r\\n\\r\\n        <ion-card class=\\\"ion-margin\\\">\\r\\n\\r\\n            <ion-img [src]=\\\"data.avatar\\\" [alt]=\\\"data.name\\\"></ion-img>\\r\\n\\r\\n            <ion-card-header>\\r\\n                <ion-card-title>{{data.name}}</ion-card-title>\\r\\n                <ion-card-subtitle>{{data.email}}</ion-card-subtitle>\\r\\n            </ion-card-header>\\r\\n\\r\\n            <ion-card-content>\\r\\n\\r\\n                <!-- Formatando a data -->\\r\\n                <p>Cadastrado em: {{data.date | date: 'dd/MM/yyyy, HH:mm'}}.</p>\\r\\n                <p>\\r\\n                    Status:\\r\\n                    <ion-note *ngIf=\\\"data.status == 1\\\" color=\\\"secondary\\\">Ativo</ion-note>\\r\\n                    <ion-note *ngIf=\\\"data.status == 0\\\" color=\\\"danger\\\">Inativo</ion-note>\\r\\n                </p>\\r\\n\\r\\n                <ion-grid class=\\\"ion-margin-top ion-no-padding\\\">\\r\\n\\r\\n                    <ion-row>\\r\\n\\r\\n                        <ion-col>\\r\\n                            <ion-button color=\\\"success\\\" (click)=\\\"editUser(data.id)\\\">\\r\\n                                <ion-icon name=\\\"create\\\" slot=\\\"start\\\"></ion-icon> Editar\\r\\n                            </ion-button>\\r\\n                        </ion-col>\\r\\n\\r\\n                        <ion-col class=\\\"ion-text-right\\\">\\r\\n                            <ion-button color=\\\"warning\\\" (click)=\\\"delUser(data.id, data.name)\\\">\\r\\n                                <ion-icon name=\\\"trash\\\" slot=\\\"start\\\"></ion-icon> Apagar\\r\\n                            </ion-button>\\r\\n                        </ion-col>\\r\\n\\r\\n                    </ion-row>\\r\\n\\r\\n                </ion-grid>\\r\\n\\r\\n            </ion-card-content>\\r\\n\\r\\n        </ion-card>\\r\\n\\r\\n        <ion-button expand=\\\"block\\\" class=\\\"ion-margin\\\" (click)=\\\"listUsers()\\\">Listar usuários</ion-button>\\r\\n\\r\\n    </div>\\r\\n\\r\\n</ion-content>\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { UserPage } from './user.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: UserPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class UserPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { UserPageRoutingModule } from './user-routing.module';\n\nimport { UserPage } from './user.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    UserPageRoutingModule\n  ],\n  declarations: [UserPage]\n})\nexport class UserPageModule {}\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3VzZXJzL3VzZXIvdXNlci5wYWdlLnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\r\n\r\n// Rotas dinâmicas\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\n// Importa modelo dos dados\r\nimport { User } from '../../models/users.model';\r\n\r\n// Importa o service dos usuários\r\nimport { UsersService } from '../../services/users.service';\r\n\r\n// Importa classe de navegação\r\nimport { NavController } from '@ionic/angular';\r\n\r\n@Component({\r\n  selector: 'app-user',\r\n  templateUrl: './user.page.html',\r\n  styleUrls: ['./user.page.scss'],\r\n})\r\nexport class UserPage implements OnInit {\r\n\r\n  // Obtém o Id do usuário da URL da rota\r\n  id = parseInt(this.route.snapshot.paramMap.get('id'), 10);\r\n\r\n  // Variável que indentifica se temos usuários\r\n  noUser = false;\r\n\r\n  // Variável com a array de usuários obtidos\r\n  data: User;\r\n\r\n  constructor(\r\n\r\n    // Inicializa rotas dinâmicas para obter o Id\r\n    private route: ActivatedRoute,\r\n\r\n    // Inicializa o service dos usuários\r\n    private usersService: UsersService,\r\n\r\n    // Navegação\r\n    private navCtrl: NavController\r\n\r\n  ) {\r\n\r\n    console.log(this.id);\r\n   }\r\n\r\n  ngOnInit() {\r\n\r\n    // Temos o Id do usuário\r\n    // console.log('ID: ', this.id);\r\n\r\n    // Consultar a API para o Id informado usando o service getUser\r\n    this.usersService.getUser(this.id.toString()).subscribe(\r\n\r\n      (res: any) => {\r\n\r\n        // Recebemos dados da API\r\n        // console.log(res);\r\n\r\n        // Caso a consulta à API falhe...\r\n        if (res.status !== 'success') {\r\n          console.error(`Erro: ${res.result}`);\r\n          return false;\r\n        }\r\n\r\n        // Se não retornou ninguém\r\n        if (res.result === 'No record found') {\r\n\r\n          // Informa ao HTML que ususário não existe\r\n          this.noUser = true;\r\n\r\n          // Sai sem fazer mais nada\r\n          return false;\r\n\r\n          // Se usuário existe\r\n        } else {\r\n\r\n          // Mostra no HTML os dados do ususário\r\n          this.data = res.result;\r\n\r\n          // Variável lida pelo HTML\r\n          // console.log(this.data);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  // Ação do botão Editar\r\n  editUser(id: string) {\r\n    this.navCtrl.navigateForward(`usuarios/editar/${id}`);\r\n  }\r\n\r\n  // Ação do botão Apagar\r\n  delUser(id: string, name: string) {\r\n\r\n    // Confirmação\r\n    if (!confirm(\r\n      `Tem certeza que deseja apagar \"${name}\"?\\n\r\n    Esta ação é irreversível!\\n\r\nClique em [Ok] para apagar e [Cancelar] para não apagar...`\r\n    )) {\r\n\r\n      // Sai sem fazer nada\r\n      return false;\r\n    }\r\n\r\n    // Apaga o retgistro com o Id informado\r\n    this.usersService.deleteUser(this.id.toString()).subscribe(\r\n      (res: any) => {\r\n\r\n        // Se apagou\r\n        if (res.status === 'success' && res.result === 'Record deleted successfully') {\r\n\r\n          // Feedback\r\n          alert(`Usuário apagado com sucesso!\\n\\nClique em [Ok] para continuar...`);\r\n\r\n          // Retorna para a listagem de ususários\r\n          this.navCtrl.navigateForward('usuarios/todos');\r\n\r\n          // SE não conseguiu apagar\r\n        } else {\r\n\r\n          // Erro\r\n          console.error('Falha ao apagar usuário: ', res.result);\r\n\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  // Ação do botão listar usuários\r\n  listUsers() {\r\n    this.navCtrl.navigateForward('usuarios/todos');\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"users-user-user-module-es5.js"}